{"version":3,"sources":["components/CanvasFrame.js","components/ComponentCanvas.js","store/actions/actionTypes.js","store/reducers/app.js","store/reducers/canvas.js","store/reducers/grid.js","config.js","store/reducers/index.js","store/index.js","containers/App.js","store/actions/app.js","serviceWorker.js","index.js","examples/index.js"],"names":["FrameLeft","components","options","Object","entries","key","push","uid","className","name","id","FrameTop","FrameRight","FrameBottom","CanvasFrame","externals","this","props","children","React","PureComponent","connect","state","app","dispatch","ComponentCanvas","module","elements","mapActionTypes","typeArray","prefix","reduce","actions","curr","canvas","inititalState","loadState","appReducer","action","type","actionTypes","EXTERNALS_LOADED","payload","canvasReducer","ADD_CHILD","columns","count","rows","height","padding","left","right","gridReducer","rootReducer","combineReducers","grid","LOCALSTORAGE_CONFIG","namespace","debounce","middleware","save","thunk","composeEnhancers","compose","initializeStore","createStore","load","applyMiddleware","App","store","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b301483.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { uid } from 'react-uid';\nimport '../styles/CanvasFrame.css';\n\n/**\n * The left of the frame contains the list of parsed externals,\n * and a trigger to reload the externals\n */\nconst FrameLeft = ({ components }) => {\n    const options = [];\n    for (let [key, ] of Object.entries(components)) {\n        options.push(\n            <option key={uid(key)}>{key}</option>\n        )\n    }\n\n    return (\n        <div className=\"FrameLeft\">\n            <select name=\"componentSelect\" id=\"components\">\n                {options}\n            </select>\n        </div>\n    );\n};\n\n/**\n * The top of the frame contains the name of the project/page,\n * and any dynamic actions available based on the external (TODO)\n */\nconst FrameTop = () => {\n    return (\n        <div className=\"FrameTop\"></div>\n    );\n};\n\n/**\n * The right of the frame includes any custom options to pass to the selected external\n */\nconst FrameRight = () => {\n    return (\n        <div className=\"FrameRight\"></div>\n    );\n};\n\n/**\n * The bottom of the frame has nothing right now\n */\nconst FrameBottom = () => {\n    return (\n        <div className=\"FrameBottom\"></div>\n    );\n};\n\nclass CanvasFrame extends React.PureComponent {\n    render() {\n        const { externals } = this.props;\n\n        return (\n            <div className=\"CanvasFrame\">\n                <FrameLeft components={externals} />\n                <div className=\"FrameCenter\">\n                    <FrameTop />\n                    <div className=\"FrameContainer\">\n                        {this.props.children}\n                    </div>\n                    <FrameBottom />\n                </div>\n                <FrameRight />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    externals: state.app.externals\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CanvasFrame);","import React from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/ComponentCanvas.css';\n\n/**\n * The main canvas where components can be edited, and moved aorund.\n * \n * Process:\n * 0. Maintain a grid, in the foreground (or background, customaizable later).\n *      This could be defined using a computed set of column, and row breakpoints\n * 1. Each child component will be wrapped in a div, which we will control\n *      That way, the component can remain styled itself, and not care about\n *      the draggable container.\n * 2. When drag starts, calculate the bounds of the container as an offset from the mouse\n * 3. On each drag move, check which grid breakpoints lie within the range\n *      Calculate the extemes, and the rest can be interpolated\n */\nclass ComponentCanvas extends React.PureComponent {\n    /**\n     * Either creates a new CanvasElement wrapping the provided component,\n     * or if the component was previously created, returns the ref\n     * \n     * @param module React element to wrap\n     */\n    getorMakeElementFrom(module) {\n\n    }\n\n    render() {\n        // Pick up react elements to be displayed\n        return (\n            <div className=\"ComponentCanvas\">\n\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    elements: state.elements\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComponentCanvas);","/**\n * Reduces an array of action types, into an object keyed by the types,\n * and mapped to a type prefixed string.\n */\nconst mapActionTypes = (typeArray, prefix) => typeArray.reduce(\n    (actions, curr) => {\n        actions[curr] = `${prefix}:${curr}`\n        return actions;\n    }, {});\n\n/**\n * App actions\n */\nexport const app = mapActionTypes([\n    'START_LOAD',\n    'EXTERNALS_LOADED',\n    'END_LOAD',\n    'SHOW_LOADER',\n    'HIDE_LOADER'\n], 'APP')\n\n/**\n * Grid actions\n */\nexport const grid = mapActionTypes([\n    'SETUP'\n], 'GRID');\n\n/**\n * Canvas actions\n */\nexport const canvas = mapActionTypes([\n    'ADD_CHILD',\n    'MOVE_CHILD',\n    'REMOVE_CHILD'\n], 'CANVAS');","import { app as actionTypes } from '../actions/actionTypes';\n\nconst inititalState = {\n    loadState: false,\n    externals: {}\n}\n\nconst appReducer = (state = inititalState, action) => {\n    switch (action.type) {\n        case actionTypes.EXTERNALS_LOADED:\n            return {\n                ...state,\n                externals: {\n                    ...state.externals,\n                    ...action.payload\n                }\n            }\n        default:\n    }\n\n    return state;\n}\n\nexport default appReducer;","import { canvas as actionTypes } from '../actions/actionTypes';\n\nconst inititalState = {\n    elements: []\n};\n\nconst canvasReducer = (state = inititalState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_CHILD:\n            return {\n                ...state,\n            }\n        default:\n    }\n\n    return state;\n}\n\nexport default canvasReducer;","import config from '../../config';\n\nconst inititalState = config.grid;\n\nconst gridReducer = (state = inititalState, action) => {\n    switch(action.type) {\n\n    }\n\n    return state;\n}\n\nexport default gridReducer;","export default {\n    grid: {\n        columns: {\n            count: 12\n        },\n        rows: {\n            height: '16rem'\n        },\n        padding: {\n            left: '16rem',\n            right: '16rem'\n        }\n    }\n}","import { combineReducers } from 'redux';\nimport app from './app';\nimport canvas from './canvas';\nimport grid from './grid';\n\nconst rootReducer = combineReducers({\n    app,\n    grid,\n    canvas\n});\n\nexport default rootReducer;","import { applyMiddleware, compose, createStore } from 'redux';\nimport { load, save } from 'redux-localstorage-simple';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\n\nconst LOCALSTORAGE_CONFIG = {\n    namespace: 'component-canvas',\n    debounce: 1000\n};\n\nconst middleware = [\n    save(LOCALSTORAGE_CONFIG),\n    thunk\n];\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development' && window.__REDUX_DEVTOOLS_EXTENSION__) ?\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ :\n        compose;\n\nconst initializeStore = () => {\n    return createStore(\n        rootReducer,\n        load(LOCALSTORAGE_CONFIG),\n        composeEnhancers(\n            applyMiddleware(...middleware)\n        )\n    );\n}\n\nexport default initializeStore;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport CanvasFrame from '../components/CanvasFrame';\nimport ComponentCanvas from '../components/ComponentCanvas';\nimport '../styles/App.css';\nimport initializeStore from '../store';\nimport { externalsLoaded} from '../store/actions/app';\n\nexport default class App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    \n    this.store = initializeStore();\n  }\n\n  componentDidMount() {\n    const { components } = this.props;\n    this.store.dispatch(externalsLoaded(components));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Provider store={this.store}>\n          <CanvasFrame>\n            <ComponentCanvas />\n          </CanvasFrame>\n        </Provider>\n      </div>\n    );\n  }\n}","import { app as actionTypes } from './actionTypes';\n\nexport const externalsLoaded = externals => ({\n    type: actionTypes.EXTERNALS_LOADED,\n    payload: externals\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.css';\nimport examples from './examples';\n\nReactDOM.render(<App components={examples} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// import DataContainer from './data-container';\n\n/**\n * Add your import above, and key it into the below object to have it accessible on the canvas\n */\nexport default {\n    // DataContainer\n}"],"sourceRoot":""}