{"version":3,"sources":["components/CanvasFrame.js","components/ComponentCanvas.js","containers/App.js","serviceWorker.js","store/reducers/app.js","store/reducers/canvas.js","store/reducers/grid.js","config.js","store/reducers/index.js","store/index.js","index.js"],"names":["CanvasFrame","className","this","props","children","React","PureComponent","ComponentCanvas","App","Boolean","window","location","hostname","match","inititalState","loadState","appReducer","state","action","type","canvasReducer","columns","count","rows","height","padding","left","right","gridReducer","rootReducer","combineReducers","app","grid","canvas","LOCALSTORAGE_CONFIG","namespace","debounce","initializeStore","createStore","load","applyMiddleware","save","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAGqBA,G,uLAEb,OACI,yBAAKC,UAAU,eACVC,KAAKC,MAAMC,c,GAJaC,IAAMC,gBCa1BC,G,uLAEb,OACI,yBAAKN,UAAU,wB,GAHkBI,IAAMC,gB,MCDpCE,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,SCGYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAgB,CAClBC,WAAW,GAWAC,EARI,WAAoC,IAAnCC,EAAkC,uDAA1BH,EAAeI,EAAW,uCAKlD,OAJOA,EAAOC,KAIPF,GCTLH,EAAgB,GAUPM,EARO,WAAoC,IAAnCH,EAAkC,uDAA1BH,EAAeI,EAAW,uCAKrD,OAJOA,EAAOC,KAIPF,GCLLH,ECDI,CACFO,QAAS,CACLC,MAAO,IAEXC,KAAM,CACFC,OAAQ,SAEZC,QAAS,CACLC,KAAM,QACNC,MAAO,UDEJC,EARK,WAAoC,IAAnCX,EAAkC,uDAA1BH,EAAeI,EAAW,uCAKnD,OAJOA,EAAOC,KAIPF,GEEIY,EANKC,YAAgB,CAChCC,MACAC,OACAC,WCJEC,EAAsB,CACxBC,UAAW,mBACXC,SAAU,KAUCC,EAPS,WACpB,OAAOC,YAAYT,EACfU,eAAKL,GACLM,YAAgBC,eAAKP,MCJvBQ,G,MAAQL,KAEdM,IAASC,OACL,kBAAC,IAAD,CAAUF,MAAOA,GACb,kBAAC,EAAD,OAEJG,SAASC,eAAe,SPmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1eb05f8f.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/CanvasFrame.css';\n\nexport default class CanvasFrame extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"CanvasFrame\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport '../styles/ComponentCanvas.css';\n\n/**\n * The main canvas where components can be edited, and moved aorund.\n * \n * Process:\n * 0. Maintain a grid, in the foreground (or background, customaizable later).\n *      This could be defined using a computed set of column, and row breakpoints\n * 1. Each child component will be wrapped in a div, which we will control\n *      That way, the component can remain styled itself, and not care about\n *      the draggable container.\n * 2. When drag starts, calculate the bounds of the container as an offset from the mouse\n * 3. On each drag move, check which grid breakpoints lie within the range\n *      Calculate the extemes, and the rest can be interpolated\n */\nexport default class ComponentCanvas extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"ComponentCanvas\">\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport CanvasFrame from '../components/CanvasFrame';\nimport ComponentCanvas from '../components/ComponentCanvas';\nimport '../styles/App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CanvasFrame>\n        <ComponentCanvas />\n      </CanvasFrame>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const inititalState = {\n    loadState: false\n}\n\nconst appReducer = (state = inititalState, action) => {\n    switch(action.type) {\n\n    }\n\n    return state;\n}\n\nexport default appReducer;","const inititalState = {};\n\nconst canvasReducer = (state = inititalState, action) => {\n    switch(action.type) {\n\n    }\n\n    return state;\n}\n\nexport default canvasReducer;","import config from '../../config';\n\nconst inititalState = config.grid;\n\nconst gridReducer = (state = inititalState, action) => {\n    switch(action.type) {\n\n    }\n\n    return state;\n}\n\nexport default gridReducer;","export default {\n    grid: {\n        columns: {\n            count: 12\n        },\n        rows: {\n            height: '16rem'\n        },\n        padding: {\n            left: '16rem',\n            right: '16rem'\n        }\n    }\n}","import { combineReducers } from 'redux';\nimport app from './app';\nimport canvas from './canvas';\nimport grid from './grid';\n\nconst rootReducer = combineReducers({\n    app,\n    grid,\n    canvas\n});\n\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\nimport { load, save } from 'redux-localstorage-simple';\nimport rootReducer from './reducers';\n\nconst LOCALSTORAGE_CONFIG = {\n    namespace: 'component-canvas',\n    debounce: 1000\n};\n\nconst initializeStore = () => {\n    return createStore(rootReducer,\n        load(LOCALSTORAGE_CONFIG),\n        applyMiddleware(save(LOCALSTORAGE_CONFIG))\n    );\n}\n\nexport default initializeStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport initializeStore from './store';\nimport './styles/index.css';\n\nconst store = initializeStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}